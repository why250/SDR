git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/why250/SDR.git
git push -u origin main

git --help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]
           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]
           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   restore    Restore working tree files
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   diff       Show changes between commits, commit and working tree, etc
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   backfill   Download missing objects in a partial clone
   branch     List, create, or delete branches
   commit     Record changes to the repository
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   reset      Reset current HEAD to the specified state
   switch     Switch branches
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

`git push -u origin main` 命令用于将本地仓库的 `main` 分支推送到名为 `origin` 的远程仓库，并且设置 `origin main` 为本地 `main` 分支的上游（upstream）分支。

下面是这个命令的详细解释：

*   `git`: 这是 Git 版本控制系统的命令行工具。
*   `push`: 这个命令用于将本地的提交（commits）上传到远程仓库。
*   `-u` 或 `--set-upstream`: 这个选项是 `set-upstream` 的缩写。它的作用是为当前分支设置一个上游分支。设置之后，下次再使用 `git push` 或 `git pull` 命令时，就不需要指定远程仓库和分支名称了。Git 会记住 `origin main` 是本地 `main` 分支的上游，因此后续可以直接使用 `git push` 和 `git pull`。
*   `origin`: 这是远程仓库的名称。在克隆（clone）一个仓库时，Git 会自动将原始仓库命名为 `origin`。你也可以添加其他的远程仓库并给它们指定不同的名称。
*   `main`: 这是要推送的本地分支的名称。在这个例子中，它指的是本地仓库的 `main` 分支。

**总结来说，这个命令的含义是：**

1.  将你本地 `main` 分支上的所有提交推送到名为 `origin` 的远程仓库。
2.  同时，将远程仓库的 `main` 分支设置为你本地 `main` 分支的默认上游分支。这意味着以后当你在这个 `main` 分支上执行 `git push` 或 `git pull` 时，Git 会自动知道要与 `origin` 上的 `main` 分支进行交互，而无需再次输入 `origin main`。